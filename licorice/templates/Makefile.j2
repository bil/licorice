CC = gcc
DEFAULTFLAGS = -Wall 
CFLAGS = {% if debug %}-g{% endif %} -O3 $(DEFAULTFLAGS)
CFLAGSUNOPT = -O0 $(DEFAULTFLAGS)
# TODO test -Os again
CYFLAGS = -O0 -I {{py_incl}} -I {{numpy_incl}} {{drivers_incl}}
LDFLAGS = -levent -pthread -lsqlite3 {{extra_link_flags}}
LDTESTFLAGS = -lsqlite3 -pthread
CYLDFLAGS = {{py_lib}} -lsqlite3 {{py_link_flags}} {{extra_link_flags}} # -lpthread -lm -lutil -ldl should be included in py_link_flags

all: timer {% if has_drivers %}drivers {% endif %}{% for so in source_names %}{{so}} {% endfor %}{% for ar in async_reader_names %}{{ar}} {% endfor %}{% for si in sink_names %}{{si}} {% endfor %}{% for aw in async_writer_names %}{{aw}} {% endfor %}{% for c in module_names %}{{c}} {% endfor %} #drivers

timer: timer.c utilityFunctions.c {% if darwin %}darwin_compat/clock_nanosleep.c{% endif %}
	$(CC) $(CFLAGS) timer.c utilityFunctions.c {% if darwin %}darwin_compat/clock_nanosleep.c{% endif %} -o timer $(LDFLAGS)

{% for source in source_names -%}
{% if source_types[loop.index0] == 'python' -%}
{{source}}: {{source}}.pyx utilityFunctions.c
	cython --embed -3 -o {{source}}.c {{source}}.pyx
	$(CC) $(CYFLAGS) -Wno-cpp {{source}}.c utilityFunctions.c -o {{source}} $(CYLDFLAGS) # remove not a line source
{% else -%}
{{source}}: {{source}}.c utilityFunctions.c
	$(CC) $(CFLAGS) {{source}}.c utilityFunctions.c -o {{source}} $(LDFLAGS)
{% endif -%}
{%- endfor -%}

{% for async_reader in async_reader_names -%}
{% if source_types[loop.index0] == 'python' -%}
{{async_reader}}: {{async_reader}}.pyx utilityFunctions.c
	cython --embed -3 -o {{async_reader}}.c {{async_reader}}.pyx
	$(CC) $(CYFLAGS) -Wno-cpp {{async_reader}}.c utilityFunctions.c -o {{async_reader}} $(CYLDFLAGS)
{% else -%}
{{async_reader}}: {{async_reader}}.c utilityFunctions.c
	$(CC) $(CFLAGS) {{async_reader}}.c utilityFunctions.c -o {{async_reader}} $(LDFLAGS)
{% endif -%}
{% endfor -%}

{% for sink in sink_names -%}
{{sink}}:  {{sink}}.pyx utilityFunctions.c #networkUtilities.c
	cython --embed -3 -o {{sink}}.c {{sink}}.pyx
	$(CC) $(CYFLAGS) -Wno-cpp {{sink}}.c utilityFunctions.c -o {{sink}} $(CYLDFLAGS)

{% endfor -%}

{% for async_writer in async_writer_names -%}
{{async_writer}}:  {{async_writer}}.pyx utilityFunctions.c
	cython --embed -3 -o {{async_writer}}.c {{async_writer}}.pyx
	$(CC) $(CYFLAGS) -Wno-cpp {{async_writer}}.c utilityFunctions.c -o {{async_writer}} $(CYLDFLAGS)

{% endfor -%}

drivers:
	python setup_drivers.py build_ext --inplace

{% for child in module_names -%}
{{child}}: {{child}}.pyx utilityFunctions.c
	cython --embed -3 -o {{child}}.c {{child}}.pyx
	$(CC) $(CYFLAGS) -Wno-cpp {{child}}.c  utilityFunctions.c -o {{child}} $(CYLDFLAGS)
{% endfor -%}

clean:
	rm -f timer {% for so in source_names %}{{so}} {% endfor %}{% for ar in async_reader_names %}{{ar}} {% endfor %}{% for sd in source_driver_names %}{{sd}} {% endfor %}{% for si in sink_names %}{{si}} {% endfor %}{% for aw in async_writer_names %}{{aw}} {% endfor %}{% for sd in sink_driver_names %}{{sd}} {% endfor %} {% for c in module_names %}{{c}} {% endfor %}
