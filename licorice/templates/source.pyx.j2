# declare jinja variables
{% set test_throughput = ('test_throughput' in config['config'] and config['config']['test_throughput']) %}

# cimport C libraries
cimport cython
cimport numpy as np
from libc.stdio cimport printf, snprintf, stderr, stdout, fflush
from libc.stdlib cimport exit, malloc, free, calloc, EXIT_SUCCESS, EXIT_FAILURE
from libc.stdint cimport int8_t, uint8_t, int16_t, uint16_t, int32_t, uint32_t, int64_t, uint64_t
from libc.signal cimport SIGINT, SIGUSR1, SIGBUS, SIGSEGV, SIGQUIT, SIGUSR2, SIGTERM
from libc.string cimport memset, memcpy
from posix.signal cimport kill, sigaction, sigaction_t, sigset_t, sigemptyset, sigaddset, sigfillset
from posix.unistd cimport getpid, getppid, pause
from posix.mman cimport munmap, PROT_READ, PROT_WRITE, MAP_SHARED, mlockall, MCL_CURRENT, MCL_FUTURE, munlockall
from posix.types cimport pid_t
from posix.fcntl cimport O_RDWR, open, fcntl, O_RDONLY
from posix.ioctl cimport ioctl
from posix.time cimport clock_gettime, timespec

from runner_utils cimport times_t

# import Python libraries
import numpy as np
{% if not async -%}
import SharedArray as sa
{%- endif %}

# cimport key Python libraries
cimport numpy as np
cimport cython

{%- if not async %}
# import LiCoRICE utils
from module_utils import create_shared_array
{%- endif %}

{% if not async -%}
# import driver
cimport source_drivers.{{ driver_import }} as {{ driver_name }}
import source_drivers.{{ driver_import }} as {{ driver_name }}
{%- endif %}


# headers for all sources
cdef extern from "semaphore.h" nogil:
  cdef union sem_union:
    pass
  ctypedef sem_union sem_t
  sem_t *sem_open(const char *name, int oflag)
  int sem_wait(sem_t *)
  int sem_post(sem_t *)
  int sem_close(sem_t *sem)
  int sem_getvalue(sem_t * sem, int * sval)

cdef extern from "stdatomic.h":
  enum memory_order:
    memory_order_relaxed,
    memory_order_consume,
    memory_order_acquire,
    memory_order_release,
    memory_order_acq_rel,
    memory_order_seq_cst
  void atomic_thread_fence(memory_order)

cdef extern from "utilityFunctions.h":
  void init_utils(void (*pHandleExit)(int exitStatus), sigset_t *pExitMask)
  void die(char *errorStr, ...)
  void open_shared_mem(uint8_t **ppmem, const char *pName, int numBytes, int shm_flags, int mmap_flags)
  void set_sighandler(int signum, void *psh, sigset_t *block_mask)
  void make_realtime()

cdef extern from "constants.h":
  enum: PAGESIZE
  const char *SMEM0_PATHNAME
  enum: NUM_SEM_SIGS
  enum: NUM_INTERNAL_SIGS
  size_t ROUND_UP(int X, int Y)
  enum: BUF_VARS_LEN
  enum: SHM_SIZE
  enum: NUM_TICKS_OFFSET
  enum: CLOCK_MONOTONIC_RAW_OFFSET
  enum: CLOCK_MONOTONIC_OFFSET
  enum: CLOCK_REALTIME_OFFSET
  enum: BUF_VARS_OFFSET
  enum: ASYNC_READER_MUTEXES_OFFSET
  enum: SEM_NAME_LEN
  enum: SOURCE_INIT_TICKS
  enum: MODULE_INIT_TICKS

# cdef variables
cdef pid_t pid, ppid
cdef sigset_t exitMask
cdef int parse_idx
cdef int semVal
cdef int ret

cdef size_t shm_size
cdef uint8_t *pmem
cdef int64_t *pNumTicks
cdef times_t times
cdef timespec *pClockMonotonicRaw
cdef timespec *pClockMonotonic
cdef timespec *pClockRealtime
cdef sem_t *pSourceUpSem
cdef sem_t *pSourceDownSem
cdef sem_t *pSigSems[NUM_SEM_SIGS]
cdef char semNameBuf[SEM_NAME_LEN]
{%- if async %}
cdef uint8_t *pAsyncMem
cdef size_t asyncShmSize
# one extra for valid check
cdef uint32_t asyncBufStep = BUF_VARS_LEN * {{out_sig_keys|length}} + 1
ASYNC_BUF_LEN = {{async_buf_len}} * asyncBufStep
cdef packetsRecvd = 0
cdef uint32_t *asyncBufVars
cdef uint32_t *pAsyncBuf
cdef uint32_t syncBufIdx = 0
{%- endif %}
cdef uint32_t *pBufVars
# 0: tick start
# 1: tick end
# 2: next data location
# 3: num samples received this tick
# 4: buffer end offset (samples)
# 5: packet size (bytes)
# 6: max samples per tick (samples)
# 7: buffer size offset (samples)
cdef unsigned long packetNum = 0
cdef unsigned long numDropped = 0
cdef int i
{%- for sig, dtype in (sig_types.items()) %} # declare signal BufVars pointers (to point into pBufVars)
cdef uint32_t *{{sig}}BufVars
cdef uint32_t *{{sig}}AsyncBufVars
cdef uint32_t {{sig}}Latency
cdef uint8_t {{sig}}LatencySlip = 0
  {%- if not async %}
cdef {{dtype}} *{{sig}}StrtPtr
cdef {{dtype}} *{{sig}}EndPtr
  {%- endif %}
{%- endfor %}

{% if not async -%}
cdef uint32_t packetSize = {{in_signal["schema"]["data"]["size"]}} * sizeof({{in_dtype}})
cdef {{in_dtype}} *inBufStrt
cdef {{in_dtype}} *inBufEnd
cdef {{in_dtype}} *inBuf
cdef size_t inBufLen
# driver
cdef {{ driver_name }}.{{ driver_class }} driver
{%- endif %}

# python variables
# declare output signals
out_sigs = {}
sigs = {}
{%- if not has_parser %} # output packing is handled by parser code
out_sig = None
{%- endif %}

# function to close the source
cdef void handle_exit(int exitStatus) noexcept:
  global pmem, shm_size, udpReadThread, exitMutex, exitRoutine, pSourceUpSem, pSourceDownSem, pSigSems

{%- if not async %}

  {{ destruct_code }}

  driver.exit_handler(exitStatus)

  # delete the signal's shared memory array
  {%- if platform_system == "Linux" %}
  sa_names = [sig.name for sig in sa.list()]
    {%- for sig in (out_signals.keys()) %}
  if b"{{sig}}" in sa_names:
    sa.delete("shm://{{sig}}")
  else:
    printf("Could not delete shared array {{sig}}.\n")
    {%- endfor %}
  {%- else %}
   {%- for sig in (out_signals.keys()) %}
  sa.delete("shm://{{sig}}")
    {%- endfor %}
  {%- endif %}

  {%- if has_parser %}
  free(inBufStrt)
  {%- endif %}
{%- endif %}

  munmap(pmem, shm_size)
  munlockall()

  if (sem_close(pSourceUpSem) == -1):
    printf("Could not close source up semaphore. \n")
  if (sem_close(pSourceDownSem) == -1):
    printf("Could not close source down semaphore. \n")
{%- for name, sem_num in sig_sems %}
  if (sem_close(pSigSems[{{sem_num}}]) == -1):
    printf("Could not close source signal semaphore. \n")
{%- endfor %}

  exit(exitStatus)


cdef void int_handler(int signum):
  pass

cdef void exit_handler(int signum):
  global shouldExit
  printf("EXIT HANDLER for {{name}}\n")
  handle_exit(0)

cdef void bus_handler(int signum):
  printf("Bus Error in {{name}}.\n")
  handle_exit(1)

cdef void segv_handler(int signum):
  printf("Seg Fault in {{name}}.\n")
  fflush(stdout)
  handle_exit(1)

cdef void usr2_handler(int signum):
  pass

# main
sigfillset(&exitMask)
init_utils(&handle_exit, &exitMask)

pid = getpid()
ppid = getppid()

set_sighandler(SIGINT, &int_handler, &exitMask)
set_sighandler(SIGTERM, &exit_handler, &exitMask)
set_sighandler(SIGBUS, &bus_handler, &exitMask)
set_sighandler(SIGSEGV, &segv_handler, &exitMask)
set_sighandler(SIGUSR2, &usr2_handler, NULL)

# open and map shared memory
shm_size = ROUND_UP(SHM_SIZE, PAGESIZE)
open_shared_mem(&pmem, SMEM0_PATHNAME, shm_size, O_RDWR, PROT_READ | PROT_WRITE)
pNumTicks = <int64_t *>(pmem + NUM_TICKS_OFFSET)
pClockMonotonicRaw = <timespec *>(pmem + CLOCK_MONOTONIC_RAW_OFFSET)
pClockMonotonic = <timespec *>(pmem + CLOCK_MONOTONIC_OFFSET)
pClockRealtime = <timespec *>(pmem + CLOCK_REALTIME_OFFSET)
pBufVars = <uint32_t *>(pmem + BUF_VARS_OFFSET)
pSourceUpSem = sem_open("/source_up_sem_{{source_num}}", 0)
pSourceDownSem = sem_open("/source_down_sem_{{source_num}}", 0)
{%- for sig_sem in sig_sems %}
snprintf(semNameBuf, SEM_NAME_LEN, "/sig_sem_%d", {{sig_sem[1]}})
pSigSems[{{sig_sem[1]}}] = sem_open(semNameBuf, 0)
{%- endfor %}

{% for sig,args in (out_signals.items()) %}
{{sig}}BufVars = pBufVars + ({{out_sig_nums[sig] * buf_vars_len}})
memset({{sig}}BufVars, 0, 16)
{{sig}}Latency =  {{args["latency"]}}
{{sig}}BufVars[5] = {{args["packet_size"]}}
{{sig}}BufVars[6] = {{args["max_packets_per_tick"] * args["packet_size"]}}
{{sig}}BufVars[7] = {{args["buf_tot_numel"]}}
{{sig}}BufVars[13] = 1
{{sig}}BufVars[15] = {{args["history"]}}
  {%- if async %}
{{sig}}BufVars[2] = {{sig}}BufVars[6]
{{sig}}BufVars[10] = {{args["max_packets_per_tick"]}}
  {%- else %}
{{sig}}BufVars[2] = 0
{{sig}}BufVars[10] = 0 # {{sig}}Latency
  {%- endif %}
{%- endfor %}


{%- if async %}
# put buffer flush tracking variables in shared memory between
asyncShmSize = ROUND_UP(
  sizeof(uint32_t) * asyncBufStep * ASYNC_BUF_LEN,
  PAGESIZE
)
open_shared_mem(
  &pAsyncMem,
  "/async_mem_{{name}}",
  asyncShmSize,
  O_RDWR,
  PROT_READ | PROT_WRITE
)

pAsyncBuf = <uint32_t *>pAsyncMem
{%- endif %}

{% if not async -%}

  {%- if platform_system == "Linux" %}
created_mem = sa.list()
  {%- endif %}

  {% for sig,args in (out_signals.items()) %}
    {%- if platform_system == "Linux" %}
if any([b'{{sig}}' == x[0] for x in created_mem]):
  sa.delete("shm://{{sig}}")
  printf("Numpy signal {{sig}} already created. Overwriting\n")
    {%- endif %}

out_sigs["{{sig}}"] = create_shared_array(
  "shm://{{sig}}", {{args["sig_shape"]}}, dtype=np.{{args["dtype"]}}
)

{{sig}}Raw = out_sigs["{{sig}}"]
sigs["{{sig}}"] = {{sig}}Raw[{{sig}}BufVars[10]]
{{sig}} = sigs["{{sig}}"]
{{sig}}StrtPtr = <{{sig_types[sig]}} *><long>{{sig}}Raw.__array_interface__["data"][0]
{{sig}}EndPtr = {{sig}}StrtPtr + len(out_sigs["{{sig}}"])
    {%- if not has_parser %}
out_sig = out_sigs["{{sig}}"]
    {%- endif %}

    {%-  if py_maj_ver == 2 %}
# TODO determine usage in SharedArray>2.0.4
sa.mlock(out_sigs["{{sig}}"])
    {%- endif %}
  {%- endfor %}

driver = {{ driver_name }}.{{ driver_class }}()

{%- endif %}

{% if not async %}
  {%- if has_parser %}
inBufStrt = <{{in_dtype}} *>malloc(packetSize)
inBuf = inBufStrt
inBufEnd = inBufStrt + packetSize
  {%- else %}
inBufStrt = <{{out_signal_type}} *><long>out_sig.__array_interface__["data"][0]
inBuf = inBufStrt
inBufEnd = inBufStrt + {{out_signal_name}}BufVars[7]
# inBufEnd = inBufStrt + packetSize
  {%- endif %}
inBufLen = inBufEnd - inBufStrt
{%- endif %}

{% if default_params -%}
{{in_sig_name}} = {{default_params}}
{%- endif %}

{%- if not async %}

{{ construct_code }}
{%- endif %}

{%- if platform_system != "Darwin" %}
make_realtime()
{%- endif %}
kill(ppid, SIGUSR2) # this source is initialized
pause()

while(True):
  sem_wait(pSourceUpSem)

  times.tick = pNumTicks[0]
  times.monotonic_raw = <uint64_t>(
    pClockMonotonicRaw[0].tv_sec * 1e9 + pClockMonotonicRaw[0].tv_nsec
  )
  times.monotonic = <uint64_t>(
    pClockMonotonic[0].tv_sec * 1e9 + pClockMonotonic[0].tv_nsec
  )
  times.realtime = <uint64_t>(
    pClockRealtime[0].tv_sec * 1e9 + pClockRealtime[0].tv_nsec
  )

{%- if not async %}

  {%- if not has_parser %}
  inBuf = inBufStrt + {{out_signal_name}}BufVars[2]
  {%- endif %}

  inBufLen = driver.run(&times, <void *>inBuf, packetSize, sigs)

  {%- if has_parser %}
    {%- for sig, args in out_signals.items() %}
  # set signal helper variable
  if {{sig}}BufVars[10] == {{sig}}BufVars[15]: # wrap
    sigs["{{sig}}"] = {{sig}}Raw[0]
  else:
    try:
      sigs["{{sig}}"] = {{sig}}Raw[{{sig}}BufVars[10]]
    except IndexError:
      print("IndexError: {{sig}}", {{sig}}BufVars[2], {{sig}}BufVars[5], {{sig}}BufVars[6], {{sig}}BufVars[7], {{sig}}BufVars[10], {{sig}}BufVars[15], flush=True)
  # TODO test default:
  # sigs["{{sig}}"] = {{sig}}Raw[{{sig}}BufVars[10]]
  {{sig}} = sigs["{{sig}}"]
    {%- endfor %}

  # use user parser
  {{ parser_code }}
  {%- endif %}

  # update bufVars

  # make sure all signals have same packet size
  slen = -1
  {%- for sig,args in (out_signals.items()) %}
  if slen == -1:
    slen = {{sig}}BufVars[13]
  else:
    if (slen != ({{sig}}BufVars[13])):
      print(f"source: unmatched lens: {{sig}}: {slen} { {{sig}}BufVars[13] }", flush=True)
  {%- endfor %}

  {%- for sig,args in (out_signals.items()) %}
  {{sig}}BufVars[2] += {{sig}}BufVars[5]
  {{sig}}BufVars[10] += {{sig}}BufVars[13]
  if ({{sig}}BufVars[7] <= {{sig}}BufVars[2] + {{sig}}BufVars[6]) or ({{sig}}BufVars[2] > {{sig}}BufVars[4]):
    {{sig}}BufVars[4] = {{sig}}BufVars[2]
    {{sig}}BufVars[12] = {{sig}}BufVars[10]
  {{sig}}BufVars[3] += {{sig}}BufVars[5]
  {{sig}}BufVars[11] += {{sig}}BufVars[13]

  {%- endfor %}
{%- else %} # async
  # must manually set packets and samples received this tick (bufVars 3 and 11)
  packetsRecvd = 0

  # take one packet off bufVars queue
  asyncBufVars = pAsyncBuf + syncBufIdx
  if asyncBufVars[asyncBufStep-1] == 0:
      # no data this tick
      pass
  else:

    # step through BufVars (only need to copy last one)
    while asyncBufVars[asyncBufStep-1] == 1:
      # got a packet
      packetsRecvd += 1

      # signal to async proc that we don't need the last BV anymore
      if packetsRecvd > 1:  # don't clear packets before those read this tick
        if syncBufIdx == 0:
          (pAsyncBuf + <int>ASYNC_BUF_LEN - 1)[0] = 0
        else:
          (asyncBufVars - 1)[0] = 0

      # update indices
      syncBufIdx += asyncBufStep
      if syncBufIdx >= ASYNC_BUF_LEN:
        syncBufIdx = 0
      asyncBufVars = pAsyncBuf + syncBufIdx

    # reset asyncBufVars to the beginning of current BV
    if syncBufIdx == 0:
      asyncBufVars = pAsyncBuf + <int>ASYNC_BUF_LEN - <int>asyncBufStep
    else:
      asyncBufVars -= asyncBufStep

  {%- for sig in out_sig_keys %}
  {% set args = out_signals[sig] %}
  # only need to know next data indices and how many packets received
  if packetsRecvd != 0:
    {{sig}}AsyncBufVars = asyncBufVars + BUF_VARS_LEN * {{loop.index0}}
    {{sig}}BufVars[2] = {{sig}}AsyncBufVars[2]
    {{sig}}BufVars[10] = {{sig}}AsyncBufVars[10]
  {{sig}}BufVars[3] = packetsRecvd * {{sig}}BufVars[5]
  # TODO check this
  {{sig}}BufVars[11] = packetsRecvd * {{sig}}BufVars[13]
  {%- endfor %}

  if packetsRecvd != 0:
    # done using async BV; reset valid bit for last BV that was read
    asyncBufVars[asyncBufStep-1] = 0

{%- endif %}


  atomic_thread_fence(memory_order_seq_cst)

  {%- for sig,args in (out_signals.items()) %}
  if {{sig}}BufVars[2] == 0: # buffer wrap
    # set data end offset to dynamic end of data buffer
    {{sig}}BufVars[1] = {{sig}}BufVars[7]
  else:
    # set data end offset to next data location
    {{sig}}BufVars[1] = {{sig}}BufVars[2]
  # set data start offset from data end minus data size
  {{sig}}BufVars[0] = {{sig}}BufVars[1] - {{sig}}BufVars[3]

  # similarly set nd indices (w/ latency TODO)

  # {{sig}}BufVars[9] = {{sig}}BufVars[10] - {{sig}}Latency
  # {{sig}}BufVars[8] = {{sig}}BufVars[9] - {{sig}}BufVars[11]

  # TODO revisit latency
  if (
      ({{sig}}Latency > 0) and
      pNumTicks[0] >= {{sig}}Latency and
      ({{sig}}BufVars[11] == 0) and
      ({{sig}}BufVars[9] < {{sig}}BufVars[10]) # and
      # {{sig}}LatencySlip == 0
    ):
    # print(f"{pNumTicks[0]}: SLIP FORWARD\n", flush=True)
    {{sig}}BufVars[9] += 1
    {{sig}}BufVars[8] = {{sig}}BufVars[9] - 1
    {{sig}}LatencySlip = 1
  elif (
      ({{sig}}Latency > 0) and
      pNumTicks[0] >= {{sig}}Latency and
      ({{sig}}BufVars[11]) > 1
    ):
    # print(f"{pNumTicks[0]}: SLIP BACK\n", flush=True)
    {{sig}}BufVars[9] = {{sig}}BufVars[10] - {{sig}}Latency + {{sig}}LatencySlip
    {{sig}}BufVars[8] = {{sig}}BufVars[9] - {{sig}}BufVars[11] + {{sig}}LatencySlip
    {{sig}}LatencySlip = 0
  else:
    # print(f"NOSLIP: { {{sig}}BufVars[11] }\n", flush=True)
    # if {{sig}}BufVars[10] == 0:
    #   {{sig}}BufVars[9] = {{sig}}BufVars[15]
    # else:
    {{sig}}BufVars[9] = {{sig}}BufVars[10] - {{sig}}Latency
    {{sig}}BufVars[8] = {{sig}}BufVars[9] - {{sig}}BufVars[11]

  # # max_packets_per_tick check
  # if pNumTicks[0] >= 0 and {{sig}}BufVars[11] > {{sig}}BufVars[6]:
  #   printf(
  #     "Warning: More data received on tick %ld in {{name}} than allowed. "
  #     "Increase max_packets_per_tick.\n",
  #     pNumTicks[0]
  #   )
  #   fflush(stdout)

    {%- if not async %}
  # wrap before end if buffer doesn't have enough room for max data in a tick
  if (({{sig}}BufVars[7] < ({{sig}}BufVars[2]) + {{sig}}BufVars[6])):
    {{sig}}BufVars[2] = 0
    {{sig}}BufVars[10] = 0
  {{sig}}BufVars[3] = 0
  {{sig}}BufVars[11] = 0
    {%- endif %}
  {%- endfor %}

  atomic_thread_fence(memory_order_seq_cst)

{% for dep_name, dep_tuple in out_sig_dependency_info.items() %}
  {% for i in range(dep_tuple[0]) %}
  if (pNumTicks[0] >= (-1 * MODULE_INIT_TICKS)):
    sem_post(pSigSems[{{dep_tuple[1]}}])
  {%- endfor %}
{%- endfor %}
  sem_post(pSourceDownSem)
