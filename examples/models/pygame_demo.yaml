# pygame_test
#
# A model that performs a simple visualization test with the pygame backend
#
# This model reads from the parallel port, but does not do anything with that data (all modules/sinks must have inputs at this time)
#
#
# Note: model configuration is still in alpha stage and subject to cosmetic changes
#

signals:

  parallel_in:              # the signal written to from the parallel input source
    shape: 1
    dtype: uint8
    history: 1              # currently a required parameter, if historical (past ticks) data is desired, increase this number

modules:

  # sources
  parallel_reader:          # define the source
    language: python        # language is currently a required parameter, will later be optional
    in:
      name: parport_in      # needs a name, will be removed later
      args:
        type: parport       # the type of souce this is
        addr: 379           # the I/O address of the parallel port
      parser: false         # whether a parser is used
      schema:               # define the structure of the data generated from the source
        data:
          dtype: uint8      # data type quantization
          size: 1           # number of units of dtype to read per packet
        packets_per_tick: 1 # max number of packets to accept per tick (this is not relevant for parallel ports, will be removed for non-appropriate sources later)
    out:
      - parallel_in         # signal to write output of source to

  # sinks
  pygame_demo:
    language: python
    in:
      - parallel_in
    out:
      name: viz
      args:
        type: vis_pygame    # sink type for pygame
    parser: true            # most "user code" will live here
    constructor: true
    destructor: true

