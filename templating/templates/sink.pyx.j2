from libc.stdio cimport printf, stdout, fflush, remove
from libc.stdlib cimport exit, malloc, free
from libc.stdint cimport int8_t, uint8_t, int16_t, uint16_t, int32_t, uint32_t, int64_t, uint64_t
from libc.signal cimport SIGINT, SIGUSR1, SIGALRM, SIGBUS, SIGSEGV, SIGQUIT, SIGUSR2
from posix.signal cimport kill, sigaction, sigaction_t, sigset_t, sigemptyset, sigaddset, sigfillset, kill
from posix.unistd cimport getppid, pause, close, getpid, write
from posix.mman cimport shm_open, mmap, munmap, PROT_READ, PROT_WRITE, MAP_SHARED, mlockall, MCL_CURRENT, MCL_FUTURE, munlockall
from posix.fcntl cimport O_RDWR, O_WRONLY, open
from posix.types cimport pid_t
from libc.errno cimport errno, EINTR, EPIPE
from libc.string cimport memset, strcpy, strcat, strlen, memcpy
from posix.time cimport clock_gettime, CLOCK_MONOTONIC_RAW, timespec
from libcpp cimport bool
DEF SIG_BLOCK = 1

import SharedArray as sa
import numpy as np
cimport numpy as np
cimport cython
import ctypes
import portio
import time

cdef extern from "utilityFunctions.h" nogil:
  enum: __GNU_SOURCE
  void die(char *errorStr)
  void open_shared_mem(uint8_t **ppmem, const char *pName, int numBytes, int shm_flags, int mmap_flags)
  void set_sighandler(int signum, void *psh, sigset_t *block_mask)
  void make_realtime()

cdef extern from "utilityFunctions.h":
  void init_utils(void (*pHandleExit)(int exitStatus), sigset_t *pExitMask)

{% if not is_single_threaded %}
cdef extern from "<pthread.h>":
  struct sched_param:
    int sched_priority
{% endif %}

{% if sig_type == 'parport' -%}

{% elif sig_type == 'pipe' -%}
cdef extern from "<sys/types.h>":
  ctypedef unsigned short mode_t
cdef extern from "<sys/stat.h>":
  int mkfifo(const char *, mode_t)

{% elif sig_type == 'udp' -%}
cdef extern from "<arpa/inet.h>":
  uint16_t htons(uint16_t hostshort)
  int inet_aton(const char *cp, in_addr *inp)

cdef extern from "<netinet/in.h>":
  enum: IPPROTO_UDP
  ctypedef uint16_t in_port_t
  ctypedef unsigned short sa_family_t
  struct in_addr:
    uint32_t s_addr
  struct sockaddr_in:
    sa_family_t sin_family
    in_port_t sin_port
    in_addr sin_addr
    unsigned char sin_zero[8]

cdef extern from "<sys/socket.h>":
  enum: AF_INET
  enum: SOCK_DGRAM
  ctypedef uint32_t socklen_t
  struct sockaddr:
    unsigned char sa_len
    unsigned char sa_family  
    char  sa_data[14]
  ssize_t recvfrom(int, void *restrict, size_t, int, sockaddr *restrict, socklen_t *restrict)
  int bind(int, const sockaddr *, socklen_t)
  int socket(int domain, int type, int protocol)
  ssize_t sendto(int socket, const void *message, size_t length,
       int flags, const sockaddr *dest_addr,
       socklen_t dest_len)
{%- elif sig_type == 'zmq' %}

cdef extern from "zmq.h":
  int zmq_close(void *s)
  int zmq_ctx_destroy(void *context)
  void *zmq_ctx_new()
  void *zmq_socket(void *, int type)
  int zmq_bind(void *s, const char *addr)
  int zmq_recv(void *s, void *buf, size_t len, int flags)
{%- elif sig_type == 'line' %}

cdef extern from "<alsa/asoundlib.h>" nogil:
  struct _snd_pcm:
    pass
  ctypedef _snd_pcm snd_pcm_t
  ctypedef unsigned long snd_pcm_uframes_t
  ctypedef long snd_pcm_sframes_t
  int snd_pcm_prepare(snd_pcm_t* pcm) 
  snd_pcm_sframes_t snd_pcm_writei(snd_pcm_t *pcm, const void *buffer, snd_pcm_uframes_t size) 

cdef extern from "lineUtilities.h":
  int pcm_init_play()
  void pcm_close_play()

{% elif sig_type == 'disk' %}
cdef extern from "<msgpack.h>" nogil:
  ctypedef int (*msgpack_packer_write)(void* data, const char* buf, size_t len)
  ctypedef struct msgpack_sbuffer:
    size_t size
    char* data
    size_t alloc
  ctypedef struct msgpack_packer:
    void* data
    msgpack_packer_write callback
  void msgpack_sbuffer_destroy(msgpack_sbuffer* sbuf)
  void msgpack_sbuffer_clear(msgpack_sbuffer* sbuf)
  int msgpack_sbuffer_write(void* data, const char* buf, size_t len)
  void msgpack_sbuffer_init(msgpack_sbuffer* sbuf)
  int msgpack_pack_array(msgpack_packer* pk, size_t n)
  void msgpack_packer_init(msgpack_packer* pk, void* data, msgpack_packer_write callback)
  int msgpack_pack_uint8(msgpack_packer* pk, uint8_t d)
  int msgpack_pack_uint16(msgpack_packer* pk, uint16_t d)
  int msgpack_pack_uint32(msgpack_packer* pk, uint32_t d)
  int msgpack_pack_uint64(msgpack_packer* pk, uint64_t d)
  int msgpack_pack_int8(msgpack_packer* pk, int8_t d)
  int msgpack_pack_int16(msgpack_packer* pk, int16_t d)
  int msgpack_pack_int32(msgpack_packer* pk, int32_t d)
  int msgpack_pack_int64(msgpack_packer* pk, int64_t d)
  int msgpack_pack_float(msgpack_packer* pk, float d)


cdef extern from "loggingStruct.h" nogil:
  ctypedef struct SQLTableElement:
    char *colName
    char *type
    short number
    char *unit
    void *data
    char *SQLtype
  cdef const char *INSERT_STR
  cdef const char *VALUES_STR
  cdef const char *OPEN_BRACE
  cdef const char *QUESTION
  cdef const char *CLOSE_BRACE_SEMI
  cdef const char *CLOSE_BRACE
  cdef const char *COMMA

  ctypedef struct SQLTable:
    char* tableName
    short numCol
    SQLTableElement *columns

cdef extern from "<sqlite3.h>" nogil:
  ctypedef struct sqlite3:
    pass
  ctypedef struct sqlite3_stmt:
    pass
  ctypedef struct sqlite3_blob:
    pass
  int sqlite3_close(sqlite3 *)
  int sqlite3_exec(
    sqlite3*,                                  
    const char *sql,                           
    int (*callback)(void*,int,char**,char**),  
    void *,                                    
    char **errmsg                              
  )
  void sqlite3_free(void*)
  enum: SQLITE_OK
  ctypedef void (*destructor)(void*)
  destructor SQLITE_STATIC
  enum: SQLITE_OPEN_READWRITE
  int sqlite3_open_v2(
    const char *filename,   
    sqlite3 **ppDb,         
    int flags,              
    const char *zVfs        
  )

cdef extern from "sqlite3async.h" nogil:
  void sqlite3async_shutdown()
  void sqlite3async_run()
  int sqlite3async_initialize(const char *zParent, int isDefault)
  int sqlite3async_control(int op, ...)
  enum: SQLITEASYNC_HALT
  enum: SQLITEASYNC_HALT_IDLE

cdef extern from "sqlHelpers.h" nogil:
  void sql_bind_int(sqlite3_stmt *stmt, int index, int value)
  void sql_bind_double(sqlite3_stmt *stmt, int index, double value)
  void sql_bind_blob(sqlite3_stmt *stmt, int index, const void* value, int numBytes, destructor destruct)
  void sql_prepare(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
  void sql_step(sqlite3_stmt *stmt)
  void sql_finalize(sqlite3_stmt *stmt)
  void openDatabase(sqlite3 **db, char *startName, char* newNameLocation)
  void createTables(sqlite3 *db, SQLTable* databaseArr)
  enum: NUM_BUF_S
  enum: NUM_MS_IN_S
{%- endif %}

{% if not is_single_threaded -%}
cdef extern from "<sched.h>":
  enum: SCHED_FIFO
  ctypedef struct cpu_set_t:
    pass
  void CPU_ZERO(cpu_set_t *set)
  void CPU_SET(int cpu, cpu_set_t *set)

cdef extern from "<sys/types.h>":
  ctypedef unsigned int pthread_t
  ctypedef struct pthread_attr_t:
    pass
  ctypedef struct pthread_mutex_t:
    pass
  ctypedef struct pthread_cond_t:
    pass
  ctypedef struct pthread_mutexattr_t:
    pass
  ctypedef struct pthread_condattr_t:
    pass

cdef extern from "<pthread.h>" nogil:
  struct sched_param:
    int sched_priority
  int pthread_create(pthread_t *thread, pthread_attr_t *attr,
                          void *(*start_routine) (void *), void *arg)
  void pthread_exit(void *retval)
  int pthread_cond_signal(pthread_cond_t *cond)
  int pthread_mutex_lock(pthread_mutex_t *mutex)
  int pthread_mutex_unlock(pthread_mutex_t *mutex)
  int pthread_sigmask(int how, sigset_t *set, sigset_t *oldset)
  int pthread_join(pthread_t thread, void **retval)
  int pthread_cond_wait(pthread_cond_t *cond, pthread_mutex_t *mutex)
  int pthread_setaffinity_np(pthread_t thread, size_t cpusetsize, cpu_set_t *cpuset)
  int pthread_setschedparam(pthread_t thread, int policy, sched_param *param)
  int pthread_mutex_init(pthread_mutex_t *mutex, pthread_mutexattr_t *attr)
  int pthread_cond_init(pthread_cond_t *cond, pthread_condattr_t *attr)
  pthread_t pthread_self()
{%- endif %}

cdef extern from "semaphore.h":
  enum: __SIZEOF_SEM_T
  cdef union sem_union:
    char __size[__SIZEOF_SEM_T]
    long int __align
  ctypedef sem_union sem_t
  int sem_init(sem_t *, int, unsigned)
  int sem_wait(sem_t *)
  int sem_getvalue(sem_t *restrict, int *restrict)
  int sem_post(sem_t *)

cdef extern from "constants.h":
  enum: NUM_CHANNELS
  enum: MAX_PATH_LEN
  enum: NUM_CHILDREN
  enum: PAGESIZE
  enum: SMEM0_HEADER_LEN
  cdef const char *SMEM0_PATHNAME
  cdef const char *SMEMSIG_PATHNAME
  enum: NUM_NON_SOURCES
  enum: NUM_SEM_SIGS
  enum: NUM_INTERNAL_SIGS
  size_t ROUND_UP(int X, int Y)
  enum: NUM_TABLES
  cdef const char *DATALOGGER_SIGNALS_TABLE_NAME
  cdef const char *DATALOGGER_FILENAME
  enum: BUF_VARS_LEN

#include <stdatomic.h>

cdef pid_t ppid
cdef sigset_t exitMask
cdef char pathName[MAX_PATH_LEN]
#cdef struct timespec tickTimer;

{% if sig_type == 'udp' -%}
cdef int s
cdef sockaddr_in si_other
cdef socklen_t slen=sizeof(si_other)

{% elif sig_type == 'pipe' -%}
cdef int named_pipe
cdef const char *FIFOFILE = '{{out_signal['args']['filepath']}}'

{% elif sig_type == 'zmq' -%}
cdef void *radio
cdef void *context
{%- elif sig_type == 'line' %}
# cdef extern snd_pcm_t *play_handle
# cdef snd_pcm_uframes_t frames
# cdef int ret
# cdef int rc
# # threading variables
# cdef pthread_t tid
# cdef pthread_cond_t cv
# cdef pthread_mutex_t mutex
# cdef bool shouldDie = False
# # worker thread vars
# cdef char *zErrMsg
# cdef void * retVal
# cdef uint32_t lineWriteOffset = 0
# cdef bool lineWrapped
{%- elif sig_type == 'disk' %}
cdef int ret
cdef int rc
# threading variables
cdef pthread_t tid
cdef pthread_cond_t cv
cdef pthread_mutex_t mutex
cdef bool shouldDie = False
cdef char currDbName[32]
# worker thread vars
cdef char *zErrMsg
cdef void * retVal
# numpy signal data structs to hold one millisecond of data 
ctypedef struct signalsMsData:
{%- for sig,dtype in sig_types.items() %}
  {%- if sig in source_outputs %}
  {{dtype}} {{sig}}[{{in_signals[sig]['schema']['data']['size'] * 2}}]
  uint32_t {{sig}}NumPktsRcvd
  {%- else %}
  {{dtype}} {{sig}}[{{in_signals[sig]['tick_numel']}}]
  {%- endif %}
{%- endfor %}
cdef signalsMsData *pSignalsStructCur
cdef signalsMsData *pSignalsStructFlushStart
cdef signalsMsData *pSignalsStructFlushEnd
# intermediary buffer for async logging
cdef signalsMsData *logBufStrt
cdef signalsMsData *logBufEnd
# size of intermediary logging buffer in blocks of signalMsData 
cdef int signalsBufSize

# sqlite variables
cdef sqlite3 *db
cdef sqlite3_stmt *contStmt
cdef sqlite3_stmt *signalsStmt
cdef SQLTable databaseArray[NUM_TABLES]
cdef SQLTableElement signalsTableArr[{{in_signals|length}}]

# sqlite helper variables
cdef char *signalsQuery

# message pack
{%- for sig in in_signals %}
cdef msgpack_sbuffer mpSignals{{sig|capitalize}}Buf
cdef msgpack_packer mpSignals{{sig|capitalize}}Pk
{%- endfor %}

{%- endif %}

cdef int sigalrm_recv = 0

cdef size_t shm_size
cdef uint8_t *pmem
cdef int64_t *pNumTicks
cdef sem_t *pTickUpSems
cdef sem_t *pTickDownSems
cdef sem_t *pSigSems
cdef uint32_t *pBufVars
lastVal = 1

in_sigs = {}
{%- if in_signals|length == 1 %}
in_sig = None
{%- endif %}
{%- for sig, dtype in sig_types.items() %}
in_sigs['{{sig}}'] = None
cdef uint32_t *{{sig}}BufVars
cdef {{dtype}} *{{sig}}StrtPtr
cdef {{dtype}} *{{sig}}EndPtr
{%- endfor %}

{%- if sig_type != 'vis_pygame' %}
# temporary pointer to pass to output APIs
cdef uint8_t *outBuf
cdef size_t sentBytes
cdef size_t outBufLen
{%- endif %}

cdef void handle_exit(int exitStatus):
  global cv, mutex, retVal, tid, radio, context, s, shm_size, pmem
{%- if sig_type == 'disk' %}
  global shouldDie
{%- endif %}

  {{destruct_code}}

{%- if sig_type == 'udp' %}
  close(s)
{%- elif sig_type == 'pipe' %}
  close(named_pipe)
  remove(FIFOFILE)
{%- elif sig_type == 'zmq' %}
  zmq_close(radio)
  zmq_ctx_destroy(context)
{%- elif sig_type == 'line' %}
  # pthread_mutex_lock(&mutex)
  # shouldDie = True
  # pthread_cond_signal(&cv) 
  # pthread_mutex_unlock(&mutex)
  # pthread_join(tid, &retVal)
  # pcm_close_play()
{%- elif sig_type == 'disk' %}
  pthread_mutex_lock(&mutex)
  shouldDie = True
  pthread_cond_signal(&cv) 
  pthread_mutex_unlock(&mutex)
  pthread_join(tid, &retVal)
{% for sig in in_signals %}
  msgpack_sbuffer_destroy(&mpSignals{{sig|capitalize}}Buf)
{%- endfor %}
  free(logBufStrt)
  sqlite3_close(db)
  sqlite3async_shutdown()
{%- endif %}
  munmap(pmem, shm_size)
  munlockall()
  exit(exitStatus)

cdef void int_handler(int signum):
  pass

cdef void exit_handler(int signum):
  printf("EXIT HANDLER for %s\n", "{{name}}")
  handle_exit(0)

cdef void bus_handler(int signum):
  printf("Bus Error\n")
  handle_exit(1)

cdef void segv_handler(int signum):
  printf("Seg Fault\n")
  handle_exit(1)

cdef void usr2_handler(int signum):
  pass

{% if sig_type == 'disk' -%}
cdef void* processRequests(void *arg) nogil:
  global mutex, cv, shouldDie, zErrMsg, db, exitMask, signalsQuery, signalsStmt, {% for sig in in_signals %}mpSignals{{sig|capitalize}}Buf{{"," if not loop.last}} {% endfor %}, pSignalsStructFlushStart, pSignalsStructFlushEnd, pSignalsStructCur
  pthread_sigmask(SIG_BLOCK, &exitMask, NULL)

  while (True):
    pthread_mutex_lock(&mutex)
    pthread_cond_wait(&cv, &mutex)

    if (shouldDie):
      retVal = NULL  
      pthread_exit(retVal)

    ret = sqlite3_exec(db, "BEGIN TRANSACTION", NULL, NULL, &zErrMsg)
    if (ret != SQLITE_OK):
      # print sql error msg
      sqlite3_free(zErrMsg)
      die("SQL error")

    # log numpy signals
    pSignalsStructFlushEnd = pSignalsStructCur
    while (pSignalsStructFlushStart != pSignalsStructFlushEnd):
      sql_prepare(db, signalsQuery, -1, &signalsStmt, NULL)

    {%- for sig, args in in_signals.items() %}
      msgpack_sbuffer_clear(&mpSignals{{sig|capitalize}}Buf)
      msgpack_pack_array(&mpSignals{{sig|capitalize}}Pk, {{args['tick_numel']}})
      {%- if sig in source_outputs %}
      for i in range (pSignalsStructFlushStart.{{sig}}NumPktsRcvd):
      {%- else %}
      for i in range({{args['tick_numel']}}):
      {%- endif %}
        msgpack_pack_{{args['dtype_msgpack']}}(&mpSignals{{sig|capitalize}}Pk, pSignalsStructFlushStart.{{sig}}[i])
      sql_bind_blob(signalsStmt, {{loop.index}}, mpSignals{{sig|capitalize}}Buf.data, mpSignals{{sig|capitalize}}Buf.size, SQLITE_STATIC)
    {%- endfor %}

      sql_step(signalsStmt)
      sql_finalize(signalsStmt)

      pSignalsStructFlushStart += 1
      if (pSignalsStructFlushStart == logBufEnd):
        pSignalsStructFlushStart = logBufStrt


    ret = sqlite3_exec(db, "END TRANSACTION", NULL, NULL, &zErrMsg)
    if (ret != SQLITE_OK):
      # print sql error msg
      sqlite3_free(zErrMsg)
      die("SQL error")

    sqlite3async_run()

    pthread_mutex_unlock(&mutex)
{%- endif %}

{% if sig_type == 'line' -%}
# cdef void* processRequests(void *arg) nogil:
#   global mutex, cv, shouldDie, retVal, exitMask, ret, frames, play_handle, zErrMsg, lineWriteOffset, {% for sig,dtype in sig_types %}{{sig}}BufVars, {{sig}}StrtPtr, {{sig}}EndPtr{{"," if not loop.last}} {% endfor %}
#   pthread_sigmask(SIG_BLOCK, &exitMask, NULL)
#   zErrMsg = <char *>0
#   {%- if has_parser and out_signal['args']['type'] != 'vis_pygame' %}
#   # TODO figure out outBuf stuff for this
#   # need to not use {{sig}} when there is a parser and instead do everything with outBuf, letting user set outBuf using {{sig}}StrtPtrs
#   {%- endif %}
#   while (True):
#     pthread_mutex_lock(&mutex)
#     pthread_cond_wait(&cv, &mutex) 

#     if (shouldDie):
#       retVal = NULL  
#       pthread_exit(retVal)

#     if ({{sig}}BufVars[1] < lineWriteOffset):
#       lineWrapped = True

#     while (lineWrapped or ((lineWriteOffset + frames * 2) < {{sig}}BufVars[1])):
#       ret = snd_pcm_writei(play_handle, <void *>({{sig}}StrtPtr + lineWriteOffset), frames)
#       if (ret == -EPIPE):
#         # EPIPE means underrun
#         printf("underrun occurred\n")
#         snd_pcm_prepare(play_handle)
#       elif (ret < 0):
#        die("writei failed")
#       elif (ret != <int>frames):
#         die("short write")

#       # z = 0
#       # while (z < frames * 2):
#       #   printf("%d ", (sigStrtPtr)[lineWriteOffset + z])
#       #   z += 1
#       # printf("\n\n")
#       lineWriteOffset += (frames * 2)
#       if (lineWriteOffset >= ({{sig}}EndPtr - {{sig}}StrtPtr)):
#         lineWriteOffset = 0
#         lineWrapped = False

#     # why is this all the way down here?  won't the mutex be locked until it gets here (or its unlocking twice,
#     # which isn't good either)? 
#     pthread_mutex_unlock(&mutex)
{%- endif %}

# main
sigemptyset(&exitMask)
sigaddset(&exitMask, SIGALRM)
init_utils(&handle_exit, &exitMask)

cdef int pid = getpid()
ppid = getppid()

set_sighandler(SIGINT, &int_handler, &exitMask)
set_sighandler(SIGUSR1, &exit_handler, &exitMask)
set_sighandler(SIGBUS, &bus_handler, &exitMask)
set_sighandler(SIGSEGV, &segv_handler, &exitMask)
set_sighandler(SIGUSR2, &usr2_handler, NULL)

{% if not is_single_threaded -%}
# init mutex and condition variable
rc = pthread_mutex_init(&mutex, NULL)
if (rc): die("pthread_mutex_init failed")
rc = pthread_cond_init(&cv, NULL)
if (rc): die("pthread_cond_init failed")
# create background thread
rc = pthread_create(&tid, NULL, &processRequests, NULL)
if (rc): die("pthread_create failed")

cdef sched_param param
param.sched_priority = 39
pthread_setschedparam(tid, SCHED_FIFO, &param)
cdef cpu_set_t mask
# cdef pthread_t maint = pthread_self()
# CPU_ZERO(&mask)
# CPU_SET(3, &mask)
# pthread_setaffinity_np(maint, sizeof(cpu_set_t), &mask)
CPU_ZERO(&mask)
CPU_SET(4, &mask)
pthread_setaffinity_np(tid, sizeof(cpu_set_t), &mask)
{%- endif %}
{% if sig_type == 'disk' %}

# SQLITE INIT
# initialize sqlite3async
rc = sqlite3async_initialize(NULL, 1)
if (rc != SQLITE_OK):
  die("sqlite3async init failed\n")
# control sqlite3async: set attributes
cdef int eNewHalt = SQLITEASYNC_HALT_IDLE
rc = sqlite3async_control(SQLITEASYNC_HALT, eNewHalt)
if (rc != SQLITE_OK):
  die("sqlite3async control failed\n")


# create numpy signals table sql insert queries
queryLen = strlen(INSERT_STR) + strlen(DATALOGGER_SIGNALS_TABLE_NAME) + strlen(VALUES_STR) + strlen(OPEN_BRACE) + \
 {%for sig in in_signals%}strlen(QUESTION){{" + strlen(COMMA) + " if not loop.last}}{%endfor%} + strlen(CLOSE_BRACE_SEMI)
signalsQuery = <char *> malloc(queryLen + 1)
strcpy(signalsQuery, INSERT_STR)
strcat(signalsQuery, DATALOGGER_SIGNALS_TABLE_NAME)
strcat(signalsQuery, VALUES_STR)
strcat(signalsQuery, OPEN_BRACE)
{%- for sig in in_signals %}
strcat(signalsQuery, QUESTION)
{%- if not loop.last %}
strcat(signalsQuery, COMMA)
{%- endif %}
{%- endfor %}
strcat(signalsQuery, CLOSE_BRACE_SEMI)
# signals buffer
signalsBufSize = NUM_BUF_S * NUM_MS_IN_S
logBufStrt = <signalsMsData *>malloc(signalsBufSize * sizeof(signalsMsData))
logBufEnd = logBufStrt + signalsBufSize
pSignalsStructCur = logBufStrt
pSignalsStructFlushStart = pSignalsStructCur
openDatabase(&db, DATALOGGER_FILENAME, currDbName)
sqlite3_exec(db, "PRAGMA journal_mode = MEMORY", NULL, NULL, &zErrMsg)
{%- for sig,args in in_signals.items() %}
signalsTableArr[{{loop.index0}}].colName = "{{sig}}"
signalsTableArr[{{loop.index0}}].type = "uint64_t"
signalsTableArr[{{loop.index0}}].number = {{args['tick_numel']}}
signalsTableArr[{{loop.index0}}].unit = "TODO"
signalsTableArr[{{loop.index0}}].data = NULL
signalsTableArr[{{loop.index0}}].SQLtype = "BLOB"
{%- endfor %} 
databaseArray[0].tableName = DATALOGGER_SIGNALS_TABLE_NAME
databaseArray[0].numCol = {{in_signals|length}}
databaseArray[0].columns = signalsTableArr
createTables(db, databaseArray)
# flush sqlite buffer before execution start
sqlite3async_run()


# initialize message pack for numpy signals
{% for sig, args in in_signals.items() %}
msgpack_sbuffer_init(&mpSignals{{sig|capitalize}}Buf)
msgpack_packer_init(&mpSignals{{sig|capitalize}}Pk, &mpSignals{{sig|capitalize}}Buf, msgpack_sbuffer_write)
# enlarge buffer before main execution
msgpack_pack_array(&mpSignals{{sig|capitalize}}Pk, {{args['tick_numel']}})
for i in range({{args['tick_numel']}}):
  msgpack_pack_int16(&mpSignals{{sig|capitalize}}Pk, 0)
{% endfor %}
{%- endif %}

# open and map shared parent memory

shm_size = sizeof(uint64_t) + (sizeof(sem_t) * (1 + NUM_NON_SOURCES + NUM_SEM_SIGS)) + (sizeof(uint32_t) * BUF_VARS_LEN * NUM_INTERNAL_SIGS)
shm_size = ROUND_UP(shm_size, PAGESIZE)
open_shared_mem(&pmem, SMEM0_PATHNAME, shm_size, O_RDWR, PROT_READ | PROT_WRITE)
pNumTicks = <int64_t *>(pmem)
pTickUpSems = <sem_t *>(pmem + sizeof(uint64_t) + sizeof(sem_t))
pTickDownSems = <sem_t *>(pmem + sizeof(uint64_t) + sizeof(sem_t) + (NUM_NON_SOURCES * sizeof(sem_t)))
pSigSems = <sem_t *>(pmem + sizeof(uint64_t) + sizeof(sem_t) + (2 * NUM_NON_SOURCES * sizeof(sem_t)))
pBufVars = <uint32_t *>(pmem + sizeof(uint64_t) + sizeof(sem_t) + (2 * NUM_NON_SOURCES * sizeof(sem_t)) + NUM_SEM_SIGS * sizeof(sem_t))

created_mem = sa.list()
{% for sig,dtype in sig_types.items() %}
if any([b'{{sig}}' == x[0] for x in created_mem]):
  in_sigs['{{sig}}'] = sa.attach("shm://{{sig}}")
  {{sig}} = in_sigs['{{sig}}']
{%- if py_maj_ver == 2 %}
  # sa.mlock(in_sigs['{{sig}}'])
{%- endif %}
  {{sig}}BufVars = pBufVars + {{in_sig_nums[sig] * buf_vars_len}}
else:
  die("numpy signal not created\n")
{% if sig_type != 'vis_pygame' %}
{{sig}}StrtPtr = <{{dtype}} *><long>in_sigs['{{sig}}'].__array_interface__['data'][0] 
{{sig}}EndPtr = {{sig}}StrtPtr + len(in_sigs['{{sig}}'])
{% endif %}
{% endfor %}

{% if has_parser and out_signal['args']['type'] != 'vis_pygame' and is_single_threaded -%}
# TODO malloc outBuf according to yaml config 
# set outBufLen accordingly
{%- endif %}

{% if sig_type == 'udp' -%}
# create a UDP socket
s = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)
if (s == -1):
  die("NETWORK ERROR: socket\n")
# zero out the structure
memset(<char *> &si_other, 0, sizeof(si_other))
si_other.sin_family = AF_INET
si_other.sin_port = htons({{out_signal['args']['port']}})
if (inet_aton("{{out_signal['args']['addr']}}", &si_other.sin_addr)==0):
  die("inet_aton() failed\n")
{% elif sig_type == 'pipe' %}
named_pipe = open(FIFOFILE, O_RDWR)
if (named_pipe == -1):
  die("Could not open pipe \n")

{% elif sig_type == 'line' %}
# # initiliaze line in 
# frames = pcm_init_play()
{% elif sig_type == 'parport' -%}
# make sure parport is writeable
if (portio.ioperm(0x{{out_signal['args']['addr']}}, 1, 1)):
  die("io permission denied\n")
{% elif sig_type == 'zmq' -%}
context = zmq_ctx_new() 
if (not context):
  die("Could not create ZMQ context.\n")
radio = zmq_socket(context, ZMQ_RADIO)
if (not radio):
  die("Could not create ZMQ socket.\n")
rc = zmq_connect(radio, "udp://192.168.1.1:5555")
assert (rc == 0)
{%- endif %}

{% if default_params -%}
{{default_sig_name}} = {{default_params}}
{%- endif %}
{{construct_code}}

make_realtime()

kill(ppid,SIGUSR1)
move_count = 0
while(True):
  sem_wait(&pTickUpSems[{{non_source_num}}])

{%- for dep_on in m_dep_on %}
  sem_wait(&pSigSems[{{dep_on[1]}}])
{%- endfor %}

  {{parser_code}} 

{%- if not has_parser and out_signal['args']['type'] != 'vis_pygame' %}
  outBuf = <uint8_t *>({{in_signal_name}}StrtPtr + {{in_signal_name}}BufVars[0])
  outBufLen = {{in_signal_name}}BufVars[1] - {{in_signal_name}}BufVars[0] 
{%- endif %}
{%- if sig_type == 'udp' %}
  for sentBytes in range(0,outBufLen,1472): # TODO read in MTU or make constant for user. or could use sendto max
    if (sendto(s, outBuf + sentBytes, 1472, 0, <sockaddr *>&si_other, slen)==-1):
      die("sendto() failed")
{%- elif sig_type == 'pipe' %}
  if(outBufLen > 0):
    if(write(named_pipe, outBuf, outBufLen) == -1):
      die("Pipe Write Failed \n") 
{%- elif sig_type == 'parport' %}
  portio.outb(<unsigned char>outBuf[0],0x{{out_signal['args']['addr']}})
{%- elif sig_type == 'disk' %}
  {%- for sig,dtype in sig_types.items() %}
  {%- if sig in source_outputs %}
  memcpy(pSignalsStructCur.{{sig}}, {{sig}}StrtPtr + {{sig}}BufVars[0], {{sig}}BufVars[11] * {{sig}}BufVars[5])
  pSignalsStructCur.{{sig}}NumPktsRcvd = {{sig}}BufVars[11]
  {%- else %}
  memcpy(pSignalsStructCur.{{sig}}, {{sig}}StrtPtr + {{sig}}BufVars[0], sizeof((<signalsMsData*>0).{{sig}}))
  {%- endif %}
  {%- endfor %}
  pSignalsStructCur += 1
  if (pSignalsStructCur == logBufEnd):
    pSignalsStructCur = logBufStrt
{%- endif %}

{%- if sig_type == 'line' %}
  # # Output handled in async thread

  # if (pNumTicks[0] % 25 == 0):
  #   pthread_mutex_lock(&mutex)
  #   pthread_cond_signal(&cv)
  #   pthread_mutex_unlock(&mutex)
{%- elif sig_type == 'disk' %}
  if (pNumTicks[0] % 1000 == 0):
    pthread_mutex_lock(&mutex)
    pthread_cond_signal(&cv)
    pthread_mutex_unlock(&mutex)
{%- endif %}
  sem_post(&pTickDownSems[{{non_source_num}}])
  sigalrm_recv -= 1
