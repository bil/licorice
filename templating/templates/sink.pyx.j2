from libc.stdio cimport printf, stdout, fflush
from libc.stdlib cimport exit
from libc.stdint cimport uint8_t, uint16_t, uint32_t, int64_t, int16_t, int32_t
from libc.signal cimport SIGINT, SIGUSR1, SIGALRM, SIGBUS, SIGSEGV, SIGQUIT, SIGUSR2
from posix.signal cimport kill, sigaction, sigaction_t, sigset_t, sigemptyset, sigaddset, sigfillset, kill
from posix.unistd cimport getppid, pause, close, getpid
from posix.mman cimport shm_open, mmap, munmap, PROT_READ, PROT_WRITE, MAP_SHARED, mlockall, MCL_CURRENT, MCL_FUTURE, munlockall
from posix.fcntl cimport O_RDWR
from posix.types cimport pid_t
from libc.errno cimport errno, EINTR, EPIPE
from libc.string cimport memset
from posix.time cimport clock_gettime, CLOCK_MONOTONIC_RAW, timespec
from libcpp cimport bool
DEF SIG_BLOCK = 1

import SharedArray as sa
import numpy as np
cimport numpy as np
cimport cython
import ctypes
import portio

{% set sig_type = out_signal['args']['type'] -%}
{% if sig_type == 'vis' -%}
# Init (CONSTRUCTOR/IMPORT)
import pygame
import sys, random, time, math, os.path
{%- endif %}

{% if out_signal['args']['parser'] -%}
import {{parser}}
{%- endif %}

cdef extern from "utilityFunctions.h" nogil:
  enum: __GNU_SOURCE
  void die(char *errorStr)
  void open_shared_mem(uint8_t **ppmem, const char *pName, int numBytes, int shm_flags, int mmap_flags)
  void set_sighandler(int signum, void *psh, sigset_t *block_mask)
  void make_realtime()

cdef extern from "utilityFunctions.h":
  void init_utils(void (*pHandleExit)(int exitStatus), sigset_t *pExitMask)

{% if sig_type == 'parport' -%}
{% elif sig_type == 'udp' -%}
cdef extern from "<arpa/inet.h>":
  uint16_t htons(uint16_t hostshort)
  int inet_aton(const char *cp, in_addr *inp)

cdef extern from "<netinet/in.h>":
  enum: IPPROTO_UDP
  ctypedef uint16_t in_port_t
  ctypedef unsigned short sa_family_t
  struct in_addr:
    uint32_t s_addr
  struct sockaddr_in:
    sa_family_t sin_family
    in_port_t sin_port
    in_addr sin_addr
    unsigned char sin_zero[8]

cdef extern from "<sys/socket.h>":
  enum: AF_INET
  enum: SOCK_DGRAM
  ctypedef uint32_t socklen_t
  struct sockaddr:
    unsigned char sa_len
    unsigned char sa_family  
    char  sa_data[14]
  ssize_t recvfrom(int, void *restrict, size_t, int, sockaddr *restrict, socklen_t *restrict)
  int bind(int, const sockaddr *, socklen_t)
  int socket(int domain, int type, int protocol)
  ssize_t sendto(int socket, const void *message, size_t length,
       int flags, const sockaddr *dest_addr,
       socklen_t dest_len)
{%- elif sig_type == 'zmq' %}

cdef extern from "zmq.h":
  int zmq_close(void *s)
  int zmq_ctx_destroy(void *context)
  void *zmq_ctx_new()
  void *zmq_socket(void *, int type)
  int zmq_bind(void *s, const char *addr)
  int zmq_recv(void *s, void *buf, size_t len, int flags)
{%- elif sig_type == 'line' %}

cdef extern from "<alsa/asoundlib.h>" nogil:
  struct _snd_pcm:
    pass
  ctypedef _snd_pcm snd_pcm_t
  ctypedef unsigned long snd_pcm_uframes_t
  ctypedef long snd_pcm_sframes_t
  int snd_pcm_prepare(snd_pcm_t* pcm) 
  snd_pcm_sframes_t snd_pcm_writei(snd_pcm_t *pcm, const void *buffer, snd_pcm_uframes_t size) 

cdef extern from "lineUtilities.h":
  int pcm_init_play()
  void pcm_close_play()

cdef extern from "<sched.h>":
  enum: SCHED_FIFO
  ctypedef struct cpu_set_t:
    pass
  void CPU_ZERO(cpu_set_t *set)
  void CPU_SET(int cpu, cpu_set_t *set)

cdef extern from "<sys/types.h>":
  ctypedef unsigned int pthread_t
  ctypedef struct pthread_attr_t:
    pass
  ctypedef struct pthread_mutex_t:
    pass
  ctypedef struct pthread_cond_t:
    pass
  ctypedef struct pthread_mutexattr_t:
    pass
  ctypedef struct pthread_condattr_t:
    pass

cdef extern from "<pthread.h>" nogil:
  struct sched_param:
    int sched_priority
  int pthread_create(pthread_t *thread, pthread_attr_t *attr,
                          void *(*start_routine) (void *), void *arg)
  void pthread_exit(void *retval)
  int pthread_cond_signal(pthread_cond_t *cond)
  int pthread_mutex_lock(pthread_mutex_t *mutex)
  int pthread_mutex_unlock(pthread_mutex_t *mutex)
  int pthread_sigmask(int how, sigset_t *set, sigset_t *oldset)
  int pthread_join(pthread_t thread, void **retval)
  int pthread_cond_wait(pthread_cond_t *cond, pthread_mutex_t *mutex)
  int pthread_setaffinity_np(pthread_t thread, size_t cpusetsize, cpu_set_t *cpuset)
  int pthread_setschedparam(pthread_t thread, int policy, sched_param *param)
  int pthread_mutex_init(pthread_mutex_t *mutex, pthread_mutexattr_t *attr)
  int pthread_cond_init(pthread_cond_t *cond, pthread_condattr_t *attr)
  pthread_t pthread_self()
{%- endif %}

cdef extern from "semaphore.h":
  enum: __SIZEOF_SEM_T
  cdef union sem_union:
    char __size[__SIZEOF_SEM_T]
    long int __align
  ctypedef sem_union sem_t
  int sem_init(sem_t *, int, unsigned)
  int sem_wait(sem_t *)
  int sem_getvalue(sem_t *restrict, int *restrict)
  int sem_post(sem_t *)

cdef extern from "constants.h":
  enum: NUM_CHANNELS
  enum: MAX_PATH_LEN
  enum: NUM_CHILDREN
  enum: PAGESIZE
  enum: SMEM0_HEADER_LEN
  cdef const char *SMEM0_PATHNAME
  cdef const char *SMEMSIG_PATHNAME

#include <stdatomic.h>

cdef int numMS = 0
cdef pid_t ppid
cdef sigset_t exitMask
cdef char pathName[MAX_PATH_LEN]

{% if sig_type == 'udp' -%}
cdef int s
cdef sockaddr_in si_other
cdef socklen_t slen=sizeof(si_other)
cdef socklen_t recv_len
{% elif sig_type == 'zmq' -%}
cdef void *radio
cdef void *context
{% elif sig_type == 'vis' -%}
# Init (CONSTRUCTOR)
cdef:
    int width = 600
    int height = 600
    tuple black = (0,0,0)

# TASK LOGIC
    # tuple white = (255,255,255)
    # tuple green = (92,244,6)
    # int ball_size = 20
    # char *audio_path = '/home/a/rigaudio'
    # char *success = 'EC_go.wav'
    # char *failure = 'C#C_failure.wav'
    # int n_trials = 0
    # int n_success = 0
    # list cursor_pos = [300, 300]
    # int inTrial = 1
    # int trial_time = 0
    # int rest_time = 0
    # int time_on_target = 0 
{%- elif sig_type == 'line' %}
cdef extern snd_pcm_t *play_handle
cdef snd_pcm_uframes_t frames
cdef int ret
cdef int rc
# threading variables
cdef pthread_t tid
cdef pthread_cond_t cv
cdef pthread_mutex_t mutex
cdef bool shouldDie = False
# worker thread vars
cdef char *zErrMsg
cdef void * retVal
cdef uint32_t lineWriteOffset = 0;
cdef bool lineWrapped
{%- endif %}

cdef sem_t *pSignalSems
cdef int sigalrm_recv = 0
cdef uint8_t *pFinish
cdef uint8_t *pmem

cdef uint32_t *pSignalMem
cdef uint32_t *pLocalSignalMem
lastVal = 1

{% if out_signal['args']['parser'] -%}
in_sigs = []
{%- else %}
cdef {{in_signals[in_signals.keys()[0]]['dtype']}}_t *sigStrtPtr
cdef {{in_signals[in_signals.keys()[0]]['dtype']}}_t *sigEndPtr
# cdef {{in_signals['dtype']}}_t *curPtr
{%- endif %}

in_sig = None

cdef void handle_exit(int exitStatus):
  global cv, mutex, retVal, tid, radio, context, s
{%- if sig_type == 'udp' %}
  close(s)
{%- elif sig_type == 'zmq' %}
  zmq_close(radio)
  zmq_ctx_destroy(context)
{%- elif sig_type == 'vis' %}
  # DESTRUCTOR
  pygame.quit()
{%- elif sig_type == 'line' %}
  pthread_mutex_lock(&mutex)
  shouldDie = True
  pthread_cond_signal(&cv) 
  pthread_mutex_unlock(&mutex)
  pthread_join(tid, &retVal)
  pcm_close_play()
{%- endif %}
  exit(exitStatus)

cdef void exit_handler(int signum):
  handle_exit(0)

cdef void bus_handler(int signum):
  printf("Bus Error\n")
  handle_exit(1)

cdef void segv_handler(int signum):
  printf("Seg Fault\n")
  handle_exit(1)

cdef void usr2_handler(int signum):
  pass

{% if sig_type == 'vis' -%}
# class Cursor(pygame.sprite.Sprite):

#     def __init__(self, color, radius, pos):
#        pygame.sprite.Sprite.__init__(self)
#        self.radius = radius
#        self.color = color

#        self.image = pygame.Surface([radius * 2, radius * 2]).convert_alpha()
#        self.draw()

#        self.rect = self.image.get_rect()   
#        self.rect.x, self.rect.y = pos
    
#     def update(self, offset):
#         # Do not move out of the screen
#         if self.rect.left < 0 and offset[0] < 0:
#           offset[0] = 0
#         if self.rect.top < 0 and offset[1] < 0: 
#           offset[1] = 0 
#         if self.rect.bottom > height and offset[1] > 0: 
#           offset[1] = 0
#         if self.rect.right > width and offset[0] > 0: 
#           offset[0] = 0

#         self.rect = self.rect.move(offset)

#     def set_color(self, color):
#       self.color = color
#       self.draw()
      
#     def set_pos(self, pos):
#       self.rect.x, self.rect.y = pos

#     def set_size(self, radius):
#       self.radius = radius
#       self.image = pygame.Surface([self.radius * 2, self.radius * 2]).convert_alpha()
#       self.draw()

#     def draw(self):
#       self.image.fill((0,0,0,0))
#       pygame.draw.circle(self.image, self.color, (self.radius, self.radius), self.radius)

# class Target(pygame.sprite.Sprite):

#     def __init__(self, color, radius, positions, width, height):
#        pygame.sprite.Sprite.__init__(self)
#        self.positions = positions
       
#        self.image = pygame.Surface([radius * 2, radius * 2]).convert_alpha()
#        self.image.fill((0,0,0,0))

#        self.rect = self.image.get_rect()
#        pygame.draw.circle(self.image, color, (radius, radius), radius)
#        self.new_pos(False)

#     def new_pos(self, center):
#       if center:
#         self.rect.x, self.rect.y = width/2, height/2
#       else:
#         self.rect.x, self.rect.y = random.choice(self.positions)

# def get_circle_pos(radius, center):
#   d = int(math.sqrt(radius ** 2 / 2))
#   positions = [
#     (center[0], center[1] + radius),
#     (center[0], center[1] - radius),
#     (center[0] + radius, center[1]),
#     (center[0] - radius, center[1]),
#     (center[0] - d, center[1] - d),
#     (center[0] + d, center[1] - d),
#     (center[0] - d, center[1] + d),
#     (center[0] + d, center[1] + d) 
#   ]
#   return positions

{%- endif %}
{% if sig_type == 'line' -%}
cdef void* processRequests(void *arg) nogil:
  global mutex, cv, retVal, ret, frames, play_handle, sigStrtPtr, sigEndPtr, pLocalSignalMem, pLocalSignalMem, zErrMsg, shouldDie, lineWriteOffset, z
  pthread_sigmask(SIG_BLOCK, &exitMask, NULL)
  # int trc
  zErrMsg = <char *>0
  while (True):
    pthread_mutex_lock(&mutex)
    pthread_cond_wait(&cv, &mutex) 

    if (shouldDie):
      retVal = NULL  
      pthread_exit(retVal)

    if (pLocalSignalMem[1] < lineWriteOffset):
      lineWrapped = True

    while (lineWrapped or ((lineWriteOffset + frames * 2) < pLocalSignalMem[1])):
      ret = snd_pcm_writei(play_handle, <void *>(sigStrtPtr + lineWriteOffset), frames)
      if (ret == -EPIPE):
        # EPIPE means underrun
        printf("underrun occurred\n")
        snd_pcm_prepare(play_handle)
      elif (ret < 0):
       die("writei failed")
      elif (ret != <int>frames):
        die("short write")

      # z = 0
      # while (z < frames * 2):
      #   printf("%d ", (sigStrtPtr)[lineWriteOffset + z])
      #   z += 1
      # printf("\n\n")
      lineWriteOffset += (frames * 2)
      if (lineWriteOffset >= (sigEndPtr - sigStrtPtr)):
        lineWriteOffset = 0
        lineWrapped = False

    # why is this all the way down here?  won't the mutex be locked until it gets here (or its unlocking twice,
    # which isn't good either)? 
    pthread_mutex_unlock(&mutex)
{%- endif %}

# main
sigemptyset(&exitMask)
sigaddset(&exitMask, SIGALRM)
init_utils(&handle_exit, &exitMask)

ppid = getppid()

set_sighandler(SIGINT, &exit_handler, &exitMask)
set_sighandler(SIGBUS, &bus_handler, &exitMask)
set_sighandler(SIGSEGV, &segv_handler, &exitMask)
set_sighandler(SIGUSR2, &usr2_handler, NULL)

{% if sig_type == 'line' -%}
# init mutex and condition variable
rc = pthread_mutex_init(&mutex, NULL)
if (rc): die("pthread_mutex_init failed")
rc = pthread_cond_init(&cv, NULL)
if (rc): die("pthread_cond_init failed")
# create background thread
rc = pthread_create(&tid, NULL, &processRequests, NULL)
if (rc): die("pthread_create failed")

cdef sched_param param
param.sched_priority = 48
pthread_setschedparam(tid, SCHED_FIFO, &param)
cdef cpu_set_t mask
# cdef pthread_t maint = pthread_self()
# CPU_ZERO(&mask)
# CPU_SET(3, &mask)
# pthread_setaffinity_np(maint, sizeof(cpu_set_t), &mask)
CPU_ZERO(&mask)
CPU_SET(0, &mask)
pthread_setaffinity_np(tid, sizeof(cpu_set_t), &mask)
{%- endif %}

# open and map shared parent memory
open_shared_mem(<uint8_t **>&pSignalMem, "/smem_sig_offsets", PAGESIZE, O_RDWR,  PROT_READ | PROT_WRITE)
pLocalSignalMem = pSignalMem + 0 # TODO number all internal signals for use by corresponding source/module

open_shared_mem(&pmem, SMEM0_PATHNAME, PAGESIZE, O_RDWR,  PROT_READ | PROT_WRITE)
pFinish = pmem + SMEM0_HEADER_LEN
pFinish[NUM_CHILDREN] = 0x0

open_shared_mem(<uint8_t **>&pSignalSems, SMEMSIG_PATHNAME, 1 
    + ({{num_sigs}} * sizeof(sem_t) - 1), O_RDWR,  PROT_READ | PROT_WRITE)

created_mem = sa.list()
{% for sig,args in in_signals.iteritems() %}
if any(['{{sig}}' == x[0] for x in created_mem]):
  in_sig = sa.attach("shm://{{sig}}") # TODO, fix dtype stuff
  sa.mlock(in_sig)
else:
  die("numpy signal not created\n")
{% endfor %}
sigStrtPtr = <{{in_signals[in_signals.keys()[0]]['dtype']}}_t *><long>in_sig.__array_interface__['data'][0] # TODO don't hardcode type
sigEndPtr = sigStrtPtr + len(in_sig)

{% if sig_type == 'udp' -%}
# create a UDP socket
s = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)
if (s == -1):
  die("NETWORK ERROR: socket\n")
# zero out the structure
memset(<char *> &si_other, 0, sizeof(si_other))
si_other.sin_family = AF_INET
si_other.sin_port = htons(51004)
if (inet_aton("{{out_signal['args']['addr']}}", &si_other.sin_addr)==0):
  die("inet_aton() failed\n")
{% elif sig_type == 'line' %}
# initiliaze line in 
frames = pcm_init_play()
print "FRAMES"
print frames
{% elif sig_type == 'parport' -%}
# make sure parport is writeable
if (portio.ioperm(0x{{out_signal['args']['addr']}}, 1, 1)):
  die("io permission denied\n")
{% elif sig_type == 'zmq' -%}
context = zmq_ctx_new() 
if (not context):
  die("Could not create ZMQ context.\n")
radio = zmq_socket(context, ZMQ_RADIO)
if (not radio):
  die("Could not create ZMQ socket.\n")
rc = zmq_connect(radio, "udp://192.168.1.1:5555")
assert (rc == 0)
{% elif sig_type == 'vis' -%}
# Initialization (CONSTRUCTOR)
pygame.init()
pygame.mixer.init(11025)

# success_sound = pygame.mixer.Sound(os.path.join(audio_path, success))
# failure_sound = pygame.mixer.Sound(os.path.join(audio_path, failure))

screen = pygame.display.set_mode((width, height))
pygame.display.flip()

# target_positions = get_circle_pos(150, (width/2, height/2))
# cursor = Cursor(white, ball_size, cursor_pos)
# target = Target(green, ball_size, target_positions, width, height)
# sprites = pygame.sprite.Group(cursor, target)

# sprites.draw(screen)
# pygame.display.flip()
{%- endif %}

cdef uint32_t y

make_realtime()

kill(ppid,SIGUSR1)
move_count = 0
while(True):
  numMS += 1
{%- for dep_on in s_dep_on %}
  sem_wait(&pSignalSems[{{dep_on[1]}}])
{%- endfor %}
{%- if sig_type == 'udp' %}
  if (sendto(s, sigStrtPtr, 250, 0, <sockaddr *>&si_other, slen)==-1):
    die("sendto() failed")
{%- elif sig_type == 'parport' %}
  portio.outb(<unsigned char>sigStrtPtr[0],0x{{out_signal['args']['addr']}})
{%- elif sig_type == 'vis' %}
  # offset = [<int32_t>sigStrtPtr[0], <int32_t>sigStrtPtr[1]]
  # if inTrial:
  #   if time_on_target >= 500 or trial_time >=3000:
  #       #play_sound(time_on_target >= 500)
  #       time_on_target = 0
  #       trial_time = 0
  #       inTrial = 0
  #       screen.fill(black)
  #       n_trials += 1
  #   else:
  #     trial_time += 1
  #     if pygame.sprite.collide_rect(target, cursor):
  #       time_on_target += 1
  #     else:
  #       time_on_target = 0

  #     if numMS % 15 == 0: # Control fps
  #       sprites.update(offset)
  #       screen.fill(black)
  #       sprites.draw(screen)
  #       pygame.display.flip()
  # else:
  #   if rest_time >= 40:
  #     inTrial = 1
  #     rest_time = 0
  #     target.new_pos(n_trials % 2)
  #     sprites.draw(screen)
  #     pygame.display.flip()

  #   else:
  #     rest_time += 1

  # EVERY MS (parser)
    task_updates = sigStrtPtr[0] # { sprites: sprites/None, sound: sound/None }
    screen.fill(black)
    if task_updates[sprites]:
      task_updates[sprites].draw(screen)
      pygame.display.flip()
    if task_updates[sound]:
      task_updates[sound].play()
{%- elif sig_type == 'line' %}
  # Output handled in async thread
{%- endif %}

{%- for dep_on in m_dep_on %}
  sem_wait(&pSignalSems[{{dep_on[1]}}])
  {% set sig = logged_signals[dep_on[0]] -%}
  # TODO handle non-integer shapes
  # memcpy(pSignalsStructCur->{{dep_on[0]}}, p{{dep_on[0]|capitalize}}, sizeof(((signalsMsData*)0)->{{dep_on[0]}}))
{%- endfor %}

{%- if sig_type == 'line' %}

  if (numMS % 25 == 0):
    pthread_mutex_lock(&mutex)
    pthread_cond_signal(&cv)
    pthread_mutex_unlock(&mutex)
{%- endif %}

  pFinish[NUM_CHILDREN] = 0x0
  sigalrm_recv -= 1